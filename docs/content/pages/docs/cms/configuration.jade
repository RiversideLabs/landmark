extends ../../../templates/layout/base

include ../../../templates/mixins/docsnavcms
include ../../../templates/mixins/docsnavtop

//- block intro
//- 	.page-header
//- 		.container
//- 			h1 Configuration
//- 			p.lead How to roll LandmarkJS the way you want it.

block content
	+docsnavtop(docstype)

	.container: .row
		
		.page-intro.col-sm-12
			h1 Configuration
			p.lead How to roll LandmarkJS the way you want it.
		
		.col-sm-3
			+docsnavcms(docssectioncms)
		
		.col-sm-9: .docs-content
			
			h2 Landmark Options
			
			a(name='options-concepts')
			h3 Setting Options
			
			p The options for LandmarkJS cover a range of behaviours, from how the express app is configured to enabling features and authentication options for integrated services.
			
			p There are three ways to set options:
			
			ul.options
				li Passing a <code>{ key: 'value' }</code> configuration <code class="data-type">Object</code> to the <code>landmark.init(options)</code> method
				li Calling <code>landmark.set('key', 'value')</code>
				li Setting environment variables in <code>process.env</code>. Only some options support this (noted below).
			
			p If you want to keep secret keys and configuration out of your codebase (especially important for open source projects, or projects where not all developers should have access to production config settings) the <a href="https://npmjs.org/package/dotenv" target="_blank">dotenv</a> module makes this very easy to manage.
			
			a(name='options-project')
			h3 Project Options
			
			p The following options control the branding and navigation of the LandmarkJS application in the Admin UI:
			
			table.table
				col(width=210)
				col
				tr
					td <code>name</code> <code class="data-type">String</code>
					td The name of the LandmarkJS application
				tr
					td <code>brand</code> <code class="data-type">String</code>
					td Displayed in the top left hand corner of the Admin UI
				tr
					td <code>nav</code> <code class="data-type">Object</code>
					td
						p An object that specifies the navigation structure for the Admin UI. Create a key for each section that should be visible in the primary navigation. Each key's value can be a single list path (as is seen in the URL when you view a list) or an array of list paths. When an array is used, secondary navigation is rendered in the Admin UI.
						p The nav is also used to generate the links on the Admin UI home page; any lists that are registered but not included in the <code>nav</code> will be grouped at the bottom of the screen under the 'Other' heading.
			
			.code-header
				h4 Custom Navigation Example
				p If you had <code>User</code>, <code>Post</code> and <code>PostCategory</code> models, you could group the posts and post categories into a <strong>Content</strong> navigation item like this:
			pre: code.language-javascript
				| landmark.set('nav', {
				|     'users': 'users',
				|     'content': ['posts', 'post-categories']
				| });
		
			a(name='options-server')
			h3 Web Server Options
			
			p The following options control the configuration of your web server and the express app:
			
			table.table
				col(width=210)
				col
				tr
					td <code>env</code> <code class="data-type">String</code>
					td
						p The environment setting to use. The keys <strong>development</strong> and <strong>production</strong> are supported, and this will have an impact on things like caching compiled templates. Defaults to <code class="default-value">process.env.NODE_ENV || "development"</code>.
						p You should really <strong>set this to <code class="default-value">production</code> for your production servers</strong> using the <code>NODE_ENV</code> environment variable. Several other modules expect this convention also.
				tr
					td <code>port</code> <code class="data-type">Number</code>
					td
						p The port to listen for request on. Defaults to <code class="default-value">process.env.PORT || 3000</code>
				tr
					td <code>host</code> <code class="data-type">String</code>
					td
						p The ip address to listen for request on. Defaults to <code class="default-value">process.env.IP || '127.0.0.1'</code>
						p <code>port</code> must be set (either by option or env variable) or the <code>host</code> option will be ignored.
				tr
					td <code>views</code> <code class="data-type">String</code>
					td
						p The path to your application's <strong>view templates</strong>. This is required for using the <code>landmark.View</code> Class, and will also be set on the express app.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">"/templates/views"</code>.
				tr
					td <code>view engine</code> <code class="data-type">String</code>
					td
						p The template engine to use by default. Any engine with express support should work. <strong>Jade</strong> is included with Landmark, but you will have to add any alternate engine to your project's dependencies in your <code>package.json</code>.
						p This option is set on the express app (<a href="http://expressjs.com/api.html#app.engine" target="_blank">see docs here</a>).
				tr
					td <code>custom engine</code> <code class="data-type">Function</code>
					td
						p If you want to use a custom template engine, set this option to the function that should be used to process your templates.
						p See below for an example of how to use the <a href="http://paularmstrong.github.io/swig/" target="_blank">Swig</a> template engine.
				tr
					td <code>locals</code> <code class="data-type">Object</code>
					td
						p The default local variables to pass to your view templates.
						p Routes can extend or change local variables by modifying <code>res.locals</code>.
				tr
					td <code>static</code> <code class="data-type">String</code> or <code class="data-type">Array</code>
					td
						p One or more paths to your application's static files. Setting this will include the <code>express.static</code> middleware.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">'public'</code>.
				tr
					td <code>less</code> <code class="data-type">String</code>
					td
						p If you want Landmark to automatically compile <strong>.less</strong> files into <strong>.css</strong> files, set this value to the same path as the <code>static</code> option.
						p When this option is set, any requests to a <strong>.css</strong> or <strong>.min.css</strong> file will first check for a <strong>.less</strong> file with the same name, and if one is found, the css file will be regenerated.
				tr
					td <code>favicon</code> <code class="data-type">String</code>
					td
						p The path to your application's <strong>favicon</strong>. Setting this will include the <code>express.favicon</code> middleware. Should be relative to your project's root.
						p If you're following the <a href="/guide#start_structure">recommended project structure</a>, this should be set to <code class="default-value">"/public/favicon.ico"</code>.
				tr
					td <code>compress</code> <code class="data-type">Boolean</code>
					td Set this to <code class="default-value">true</code> to enable HTTP compression. This will include the <code>express.compress</code> middleware (<a href="http://expressjs.com/api.html#compress" target="_blank">see docs here</a>).
				tr
					td <code>logger</code> <code class="data-type">String</code>
					td Set this to include the <code>express.logger</code> middleware. The value will be passed to the middleware initialisation (<a href="http://www.senchalabs.org/connect/logger.html" target="_blank">see docs here</a>).

				tr
					td <code>trust proxy</code> <code class="data-type">Boolean</code>
					td Set this to enable processing of the HTTP request <code>X-Forwarded-For</code> header. Extracted IP addresses will be available as the array <code>req.ips</code> (<a href="http://expressjs.com/api.html#req.ips">see docs here</a>).
			
			
			.code-header
				h4 Alternate View Engines
				p By default, Landmark uses the <strong>Jade</strong> template engine for your views. Here's how you would set up a different engine, e.g. <strong>Swig</strong>.
			pre: code.language-javascript
				| var swig = require('swig');
				| landmark.set('view engine', 'swig');
				| landmark.set('custom engine', swig.renderFile);
		
			a(name='options-ssl')
			h3 HTTPS Web Server Options
			
			p There are two ways to implement HTTPS for your LandmarkJS application: either use a web server (e.g. <a href="http://nginx.com" target="_blank">NGINX</a>) or PAAS (e.g. <a href="https://www.heroku.com" target="_blank">Heroku</a>) that handles it for you, or set the following options to use the <a href="http://nodejs.org/api/https.html" target="_blank">https server provided by node.js</a>.
			
			table.table
				col(width=210)
				col
				tr
					td <code>ssl</code> <code class="data-type">Boolean</code> or <code class="data-type">String</code>
					td
						p Whether to start the SSL Server. Defaults to <code class="default-value">false</code>.
						p When set to <code class="default-value">true</code>, both https and https servers will be started. If <code>ssl key</code> or <code>ssl cert</code> are invalid, just the http server will be started.
						p When set to <code class="default-value">"only"</code>, only the https server will be started. If <code>ssl key</code> or <code>ssl cert</code> are invalid, LandmarkJS will not start.
				tr
					td <code>ssl key</code> <code class="data-type">Path</code>
					td
						p The path to your SSL Key. Should be either absolute or relative to <code class="default-value">process.cwd()</code> (which is usually your project root).
				tr
					td <code>ssl cert</code> <code class="data-type">Path</code>
					td
						p The path to your SSL Certificate. Should be either absolute or relative to <code class="default-value">process.cwd()</code> (which is usually your project root).
				tr
					td <code>ssl port</code> <code class="data-type">Number</code>
					td
						p The port to start the SSL Server on. Defaults to <code class="default-value">3001</code>.
				tr
					td <code>ssl host</code> <code class="data-type">String</code>
					td
						p The ip address to listen for request on. Defaults to <code class="default-value">process.env.SSL_IP</code> or the value of the <code>host</code> option.
			
			
			a(name='options-database')
			h3 Database and User Auth Options
			
			p The following options control your database configuration and user models / authentication:
			
			table.table
				col(width=210)
				col
				tr
					td <code>mongo</code> <code class="data-type">String</code>
					td
						p The url for your MongoDB connection.
						p You should typically set this to <code class="default-value">"mongodb://localhost/your-db" || process.env.MONGO_URI</code>
				tr
					td <code>model prefix</code> <code class="data-type">String</code>
					td
						p A prefix to apply to all the mongodb collections used by the models.
				tr
					td <code>auth</code> <code class="data-type">Mixed</code>
					td
						p Whether to enable built-in auth for Landmark's Admin UI, or a custom function to use to authenticate users.
						p When this is set to <code class="default-value">false</code> (or not defined), Landmark's Admin UI will be open to the public (so set it!)
						p If using a custom function, it should follow the standard for express middleware of <code>function(req, res, next)</code>. If a user is not logged in or should not access Landmark's Admin UI, use <code>res.redirect()</code> to redirect them - otherwise call the <code>next</code> callback to enable access.
				tr
					td <code>user model</code> <code class="data-type">String</code>
					td
						p The key of the Landmark List for users, <strong>required</strong> if <code>auth</code> is set to <code class="default-value">true</code>
						p Typically this would be set to <code class="default-value">User</code>.
				tr
					td <code>cookie secret</code> <code class="data-type">String</code>
					td
						p The encryption key to use for your cookies. Passed to Express's cookie parser.
						p It's a really good idea to set this to a long, random string.
				tr
					td <code>session store</code> <code class="data-type">String</code>
					td
						p Set this to <code class="default-value">mongo</code> to use your MongoDB database to persist session data.
						p By default, Landmark will use the in-memory session store provided by Express, which should only be used in development because it does not scale past a single process, and leaks memory over time.
						p Valid options are:
						ul
							li <code class="default-value">mongo</code> (or <code class="default-value">connect-mongo</code>)
							li <code class="default-value">connect-mongostore</code> (supports replica sets, but requires explicit configuration - see below)
							li <code class="default-value">connect-redis</code>
						p.note Session store packages are not bundled with Landmark, so make sure you explicitly add the selected session store to your project's <code>package.json</code>.
				tr
					td <code>session store options</code> <code class="data-type">Object</code>
					td
						p This option allows you to override the default session store configuration, and is passed to the session store package.
						p It is required when using the <code class="default-value">connect-mongostore</code> store.
						
						.code-header
							h4 Example for connect-mongostore
						pre: code.language-javascript
							| "sessionStore": {
							|   "db": {
							|     "name": "myDb",
							|     "servers": [
							|       { "host": "192.168.1.100", "port": 28001 },
							|       { "host": "192.168.1.100", "port": 28002 },
							|       { "host": "192.168.1.101", "port": 27017 }
							|     ]
							|   }
							| }
							
						.code-header
							h4 Example for connect-redis
						pre: code.language-javascript
							| "sessionStore": {
							|   "host": "", // Redis server hostname
							|   "port": "", // Redis server port
							|   "ttl": "", // Redis session TTL in seconds
							|   "db": "", // Database index to use
							|   "pass": "", // Password for Redis authentication
							|   "prefix": "", // Key prefix defaulting to "sess:"
							|   "url": "", // e.g. redis://user:pass@host:port/db
							| }
				tr
					td <code>back url</code> <code class="data-type">String</code>
					td
						p <code>href</code> to use for the 'back to (site name)' link in the header of the Admin UI
						p Defaults to <code class="default-value">/</code>
				tr
					td <code>signin url</code> <code class="data-type">String</code>
					td
						p <code>href</code> to bounce visitors to when they fail the default auth check (e.g. not signed in)
						p Defaults to <code class="default-value">/landmark/signin</code>, only used when <code>auth</code> is set to <code class="default-value">true</code>
				tr
					td <code>signin redirect</code> <code class="data-type">String</code>
					td
						p <code>href</code> to bounce visitors to after they successfully sign in via the built-in signin route
						p Defaults to <code class="default-value">/landmark</code>
				tr
					td <code>signout url</code> <code class="data-type">String</code>
					td
						p <code>href</code> for the signout link in the top right of the UI
						p Defaults to <code class="default-value">/landmark/signout</code> if <code>auth</code> is set to <code class="default-value">true</code>
				tr
					td <code>signout redirect</code> <code class="data-type">String</code>
					td
						p <code>href</code> to bounce visitors to after they successfully sign out via the built-in signin route
						p Defaults to <code class="default-value">/landmark</code>
			
			p For more information about setting up and using database models with Landmark, see the <a href="/docs/cms/database">database guide</a>.
			
			
			//- a(name='emails')
			//- h2 Emails
			//- 
			//- p ...
			
			
			a(name='services')
			h2 Services
			
			a(name='services-google-analytics')
			h3 Google Analytics
			
			p Landmark has support for Google Analytics tracking in the Admin UI. To enable tracking, set the following configuration options:
			
			table.table
				col(width=270)
				col
				tr
					td <code>ga property</code> <code class="data-type">String</code>
					td
						p Your Google Analytics Property
						p Will default to <code class="default-value">process.env.GA_PROPERTY</code>
				tr
					td <code>ga domain</code> <code class="data-type">String</code>
					td
						p Your Google Analytics Domain
						p Will default to <code class="default-value">process.env.GA_DOMAIN</code>
			
			p.note Note if you only want to include Google Analytics tracking in the front-end of your project, you should use different variable names from those above.
			
			
			a(name='services-google-maps')
			h3 Google Maps
			
			p Landmark's <a href="/docs/cms/database#field_location">Location field type</a> supports integration with the <a href="http://www.morethanamap.com" target="_blank">Google Maps API</a> to auto-improve values (including discovering latitude and longitude) via the <a href="https://developers.google.com/places/documentation/autocomplete" target="_blank"> Places Autocomplete API</a>.
			
			p To enable these features, <a href="https://code.google.com/apis/console/" target"_blank">obtain an API Key from Google</a> and enable the Google Maps v3 and Google Places APIs for it, then set the following options:
			
			table.table
				col(width=270)
				col
				tr
					td <code>google api key</code> <code class="data-type">String</code>
					td
						p Your Google API browser key, used to authenticate the Javascript Maps API in the Admin UI.
						p Will default to <code class="default-value">process.env.GOOGLE_BROWSER_KEY</code>
				tr
					td <code>google server api key</code> <code class="data-type">String</code>
					td
						p Your Google API server key, used to authenticate requests to the Maps API from the server.
						p Will default to <code class="default-value">process.env.GOOGLE_SERVER_KEY</code>
				tr
					td <code>default region</code> <code class="data-type">String</code>
					td
						p <strong>Optional</strong> setting to limit autocomplete results to a specific region.
						p This option takes a region code, specified as a <a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry" target="_blank">IANA language region</a> subtag.
						p Can be specified on a per-field basis by setting the <code>region</code> option on any <code>Location</code> field.
			
			pre: code.language-javascript
				| landmark.set('google api key', 'your-browser-key');
				| landmark.set('google server api key', 'your-server-key');
				| landmark.set('default region', 'au'); // optional, will limit autocomplete results to Australia
			
			p.note Note that the use of the Places Geocoding API is subject to a query limit of 2,500 geolocation requests per day, except with an enterprise license.
			p.note The Places Geocoding API may only be used in conjunction with a Google map; geocoding results without displaying them on a map is prohibited. Please make sure your Landmark app complies with the Google Maps API License.
			
			
			a(name='services-amazons3')
			h3 Amazon S3
			
			p LandmarkJS supports <a href="http://aws.amazon.com/s3/" target="_blank">Amazon S3</a> for file upload and hosting, with the <a href="/docs/cms/database#field_s3file">S3File</a> field type.
			
			p To use the S3File field in your app, <a href="https://portal.aws.amazon.com/gp/aws/developer/subscription/index.html?productCode=AmazonS3" target="_blank">sign up for an account</a>, create an <strong>S3 bucket</strong>, and get your <strong>key</strong> and <strong>secret</strong>.
			
			p Then set the <code>s3 config</code> option to an object containing your configuration (see example below).
			
			p Alternatively, set the <code class="default-value">S3_BUCKET</code>, <code class="default-value">S3_KEY</code> and <code class="default-value">S3_SECRET</code> environment variables.
			
			pre: code.language-javascript
				| landmark.set('s3 config', { bucket: 'my-bucket', key: 'my-key', secret: 'my-secret' });
			
			
			a(name='services-azure')
			h3 Windows Azure Storage
			
			p LandmarkJS supports <a href="http://www.windowsazure.com/" target="_blank">Windows Azure Storage</a> for file upload and hosting, with the <a href="/docs/cms/database#field_azurefile">AzureFile</a> field type.
			
			p To use the AzureFile field in your app, <a href="http://www.windowsazure.com/pricing/free-trial/" target="_blank">sign up for an account</a>, enter into <a href="https://manage.windowsazure.com/">Azure Management Portal</a>. Create a storage account with new(button), data services, storage. In storage account page get the access (account name, key (valid primary or secondary key)) with the button "manage access key".
			
			p Then set the <code>azurefile config</code> option to an object containing your configuration (see example below).
			
			p Alternatively, set the <code class="default-value">AZURE_STORAGE_ACCOUNT</code> and <code class="default-value">AZURE_STORAGE_ACCESS_KEY</code> environment variables.
			
			p Note that the <strong>account</strong> property should be set to your <strong>storage account</strong>, <em>not your user account</em>.
			
			pre: code.language-javascript
				| landmark.set('azurefile config', { account: 'my storage account', key: 'secret api key' });
			
			
			a(name='services-cloudinary')
			h3 Cloudinary
			
			p <a href="http://cloudinary.com" target="_blank">Cloudinary</a> is an image upload / resizing / hosting service that makes it easy to implement image management in your LandmarkJS app using the <a href="/docs/cms/database#field_cloudinaryimage">CloudinaryImage</a> and <a href="/docs/cms/database#field_cloudinaryimages">CloudinaryImages</a> field types.
			
			p To use the Cloudinary Image fields in your app, <a href="https://cloudinary.com/users/register/free" target="_blank">sign up for an account</a> (Cloudinary offers a free tier with up to 500MB storage, 50,000 images and 1GB data transfer) and get your <strong>cloud name</strong>, <strong>api key</strong> and <strong>api secret</strong>.
			
			p Then set the <code>cloudinary config</code> option to
				ul
					li an object containing your configuration (see example below), or
					li the environment variable string Cloudinary gives you (e.g. <code class="default-value">cloudinary://api_key:api_secret@cloud_name</code>)
			
			p This option will default to the <code class="default-value">CLOUDINARY_URL</code> environment variable if it is set.
			
			p When images are uploaded to Cloudinary via the Admin UI or field methods, they will have some tags automatically set on them. To prefix these tags with a custom string, set the <code>cloudinary prefix</code> option.
			
			p The built-in tags that are automatically set include:
				ul
					li <code class="default-value">{list.path}_{field.path}</code>
					li <code class="default-value">{list.path}_{field.path}_{item.id}</code>
					li <code class="default-value">{prefix}</code> (if set)
					li <code class="default-value">dev</code> (if the <code>env</code> option is not set to <code class="default-value">production</code>)
			
			pre: code.language-javascript
				| landmark.set('cloudinary config', { cloud_name: 'my-cloud', api_key: 'abc', api_secret: '123' });
				| // or
				| landmark.set('cloudinary config', 'cloudinary://api_key:api_secret@cloud_name' );
				| 
				| // optional, will prefix all built-in tags with 'landmark_'
				| landmark.set('cloudinary prefix', 'landmark-serve');
			
			
			a(name='services-embedly')
			h3 Embed.ly
			
			p <a href="http://embed.ly" target="_blank">Embed.ly</a> is a service that will parse a url (e.g. Youtube embed link) and return a whole lot of useful information, like the provider name, summary metadata, width and height of videos, as well as a clean link to use for embedding media in your views. They offer a free plan for up to 5,000 urls per month.
			
			p The <a href="/docs/cms/database#field_embedly">Embedly field type</a> is an easy way to integrate their API with your LandmarkJS app.
			
			p To configure LandmarkJS to support the Embed.ly API, simply <a href="https://app.embed.ly/signup">sign up for an account</a>, get your api key, and set the <code>embedly api key</code> option.
			
			p This option will default to the <code class="default-value">EMBEDLY_API_KEY</code> environment variable if it is set.
			
			pre: code.language-javascript
				| landmark.set('embedly api key', 'your-key');


			a(name='services-mandrill')
			h3 Mandrill
			p <a href="http://mandrill.com" target="_blank">Mandrill</a> is a scalable and affordable email infrastructure service that allows you to send emails easily. They offer a free plan for up to 12,000 emails per month.

			p To configure LandmarkJS to support the Mandrill API, simply <a href="https://mandrill.com/signup/">sign up for an account</a>, get your api key, and set both the <code>mandrill api key</code> and <code>mandrill username</code> options.
			
			p These options will default to the <code class="default-value">MANDRILL_API_KEY &amp; MANDRILL_USERNAME</code> environment variable's if set.

			pre: code.language-javascript
				| landmark.set('mandrill api key', 'your-key');
				| landmark.set('mandrill username', 'your-username');


			
			
			//- h2 Error Handling
			//- 
			//- a(name='404s')
			//- h3 <code>404</code> (not found) errors
			//- 
			//- //-  path to your 404 view template, or a function to handle 404s (standard Express signature of `function(req, res)`)
			//- 
			//- a(name='500s')
			//- h3 <code>500</code> (server error) errors
			
			
			
			a(name='updates')
			h2 Application Updates
			
			p Landmark includes an updates framework, which you can enable by setting the <code>auto update</code> option to <code class="default-value">true</code>.
			
			p Updates provide an easy way to seed your database, transition data when your models change, or run transformation scripts against your database.
			
			p Update files should be named using a semantic version followed by an optional key, like <code>0.0.1-init.js</code>. The version numbers are used to order the update scripts correctly, while the keys are a nice way to identify what each update does.
			
			p Each update file should export a single function, which should accept a single argument - the <code>next(err)</code> callback, to be called when the update is complete.
			
			p All the update files will be executed (each one waits for the previous update to complete) before the web server is started.
			
			p If the <code>next</code> callback is receives an error it will be reported to the console, and application initialisation will halt.
			
			p You can temporarily disable updates from running in development by setting a <code>__defer__</code> property on the exported function to <code>true</code>. Any subsequent updates will be skipped, but the application will be started.
			
			p Updates are only run once, and each completed update is logged in an <code>app_updates</code> collection in your database.
			
			.code-header
				h4 Update Script Example
				p Creates a new admin User
			pre: code.language-javascript
				| var landmark = require('landmark-serve'),
				|     User = landmark.list('User');
				| 
				| exports = module.exports = function(done) {
				|     new User.model({
				|         name: { first: 'Admin', last: 'User' },
				|         password: 'admin',
				|         isAdmin: true
				|     }).save(done);
				| };
			
			
			a(name='headless')
			h2 Disabling the Admin UI
			
			p You can disable the Admin UI by setting the <code>headless</code> option to <code class="default-value">true</code>.
			
			p This will allow you to use <code>landmark.start()</code> or <code>landmark.routes(app)</code> without Landmark creating route bindings for the Admin UI routes under <code class="default-value">/landmark</code>.
